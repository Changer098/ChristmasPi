@{
    ViewData["Title"] = "Setup";
    ViewData["SetupTitle"] = "Branches";
    ViewData["SetupStep"] = 3;
    ViewBag.BreadCrumbs = new string[] { "Hardware", "Lights", "Branches" };
    ViewBag.ShowProgress = true;
    @model ChristmasPi.Models.SetupBranchesModel;
}
@section Scripts {
    <script src="/js/branch.js"></script>
    <script type="text/javascript">
        var maxLightCount = 0;
        var branches = null;
        var currentBranchIndex = 0;
        var working = false;            // if talking to the server

        $(window).on("load", function () {
            branchSetupLoad();
        });
        function validateLights() {
            var start = branches[currentBranchIndex].start;
            var end = branches[currentBranchIndex].end;
            if (end <= start)
                $("#minusBtn").prop('disabled', true);
            else
                $("#minusBtn").prop('disabled', false);
            if (getCurrentLightCount() === maxLightCount) {
                $("#addBtn").prop('disabled', true);
                $("#newBtn").prop('disabled', true);
                $("#submitBtn").prop('disabled', false);
            }
            else {
                $("#addBtn").prop('disabled', false);
                $("#newBtn").prop('disabled', false);
                $("#submitBtn").prop('disabled', true);
            }
            // TODO uncomment when resetButton is re-enabled
            /*if (getCurrentLightCount() <= 1)
                $("#resetBtn").prop('disabled', true);
            else
                $("#resetBtn").prop('disabled', false);*/
            // update light count
            $("#lightcounter").text(`${getCurrentLightCount()}/${maxLightCount}`);
        }
        function updateBranchName() {
            $("#currentbranch").text(`Branch ${currentBranchIndex + 1}`);
        }
        function minusLight() {
            if (working)
                return;
            var oReq = new XMLHttpRequest();
            oReq.addEventListener("load", function () {
                if (this.status !== 200) {
                    showErrorModal("Failed to remove light");
                    working = false;
                }
                else {
                    var branch = branches[currentBranchIndex];
                    branch.remove();
                    validateLights();
                    working = false;
                }
            });
            oReq.open("POST", "/setup/branches/light/remove");
            working = true;
            oReq.send();
        }
        function newBranch() {
            if (working)
                return;
            var oReq = new XMLHttpRequest();
            oReq.addEventListener("load", function () {
                if (this.status !== 200) {
                    showErrorModal("Failed to create branch");
                    working = false;
                }
                else {
                    working = false;
                    var json = JSON.parse(this.response);
                    // get end of current branch
                    var end = branches[currentBranchIndex].end;
                    branches.push(new branch(end + 1, branches.length, "branchlist", json["color"]));
                    currentBranchIndex = currentBranchIndex + 1;
                    branches[currentBranchIndex - 1].deactivate();
                    branches[currentBranchIndex].activate();
                    validateLights();
                    updateBranchName();
                }
            });
            oReq.open("POST", "/setup/branches/branch/new");
            working = true;
            oReq.send();
        }
        function deleteBranch() {
            if (working)
                return;
            if (branches.length === 1)
                return;
            var oReq = new XMLHttpRequest();
            oReq.addEventListener("load", function () {
                if (this.status !== 200) {
                    showErrorModal("Failed to delete branch");
                    working = false;
                }
                else {
                    branches[currentBranchIndex].delete();
                    branches.pop();
                    currentBranchIndex = currentBranchIndex - 1;
                    branches[currentBranchIndex].activate();
                    working = false;
                    validateLights();
                    updateBranchName();
                }
            });
            oReq.open("POST", "/setup/branches/branch/remove");
            working = true;
            oReq.send();
        }
        function branchSetupLoad() {
            if (working)
                return;
            var oReq = new XMLHttpRequest();
            currentLightCount = 1;
            oReq.addEventListener("load", function () {
                if (this.status !== 200) {
                    showErrorModal("Failed to add light");
                    working = false;
                }
                else {
                    var json = JSON.parse(this.response);
                    branches = [];
                    currentBranchIndex = 0;
                    maxLightCount = parseInt($("#lightcount").val());
                    branches.push(new branch(1, 0, "branchlist", json["color"]));
                    validateLights();
                    working = false;
                }
            });
            oReq.open("POST", "/setup/branches/branch/new");
            working = true;
            oReq.send();
        }
        function addLight() {
            if (working)
                return;
            var oReq = new XMLHttpRequest();
            oReq.addEventListener("load", function () {
                if (this.status !== 200) {
                    showErrorModal("Failed to add light");
                    working = false;
                }
                else {
                    var branch = branches[currentBranchIndex];
                    branch.add();
                    validateLights();
                    working = false;
                }
            });
            oReq.open("POST", "/setup/branches/light/new");
            working = true;
            oReq.send();
        }
        function getCurrentLightCount() {
            var lightCount = 0;
            for (var i = 0; i < branches.length; i++) {
                var branch = branches[i];
                lightCount = lightCount + branch.lightCount;
            }
            return lightCount;
        }
        function submitBranches() {
            if (working)
                return;
            if (getCurrentLightCount() !== maxLightCount) {
                showErrorModal("Not all lights have been assigned to a branch");
                return;
            }
            branchArray = [];
            for (var i = 0; i < branches.length; i++) {
                var branch = branches[i];
                branchArray.push({
                    start: branch.start,
                    end: branch.end
                });
            }
            var json = JSON.stringify(branches);
            var oReq = new XMLHttpRequest();
            oReq.addEventListener("load", function () {
                if (this.status !== 200) {
                    showErrorModal("Failed to submit branches");
                    working = false;
                }
                else {
                    location.href = '/setup/next?current=branches';
                }
            });
            oReq.open("POST", "/setup/branches/submit");
            oReq.setRequestHeader("Content-Type", "application/json");
            working = true;
            oReq.send(json);
        }
    </script>
}
@if (Model.HasError) {
    <div class="alert alert-danger" role="alert">
        @Model.ErrorMessage
    </div>
}
<div>
    <h3 id="currentbranch">Branch 1</h3>
    <i class="nc-icon icon-lightbulb"></i>
    <h4 id="lightcounter">1/@Model.LightCount</h4>
</div>
<div>
    <button id="minusBtn" class="btn btn-info btn-just-icon" onclick="minusLight()">
        <i class="nc-icon nc-simple-delete"></i></button>
    <button id="newBtn" class="btn btn-info btn-just-icon" onclick="newBranch()">
        <i class="nc-icon nc-scissors"></i></button>
    <!--TODO: Fix and re-enable-->
    <!--<button id="resetBtn" class="btn btn-info btn-just-icon" onclick="branchSetupLoad()">
        <i class="nc-icon nc-refresh-69"></i></button>-->
    <button id="addBtn" class="btn btn-info btn-just-icon" onclick="addLight()">
        <i class="nc-icon nc-simple-add"></i>
    </button>
</div>
<div>
     <ul id="branchlist">
     </ul>
</div>
<button id="submitBtn" class="btn btn-primary" onclick="submitBranches()">Submit</button>

<input type="hidden" id="lightcount" value="@Model.LightCount" />