@{
    ViewData["Title"] = "Setup";
    ViewData["SetupTitle"] = "Services";
    ViewData["SetupStep"] = 5;
    ViewBag.BreadCrumbs = new string[] { "Hardware", "Lights", "Branches", "Defaults", "Services" };
    ViewBag.ShowProgress = true;
    @model ChristmasPi.Models.SetupServicesModel;
}
@section Scripts {
    <script type="text/javascript">
        var pi_reindeer_gif = null;
        var scheduler_reindeer_gif = null;
        var servicesStatus = ["waiting", "waiting"]
        var currentService = "christmaspi";
        var savedText = null;
        var doInstallScheduler = false;
        var servicePoller = null;
        var servicesPollTime = 100;
        var rebootDelay = 10;           // time to wait before rebooting
        var timerCount = 0;
        var timerInterval = null;

        // set current text
        function updateText(text) {
            newText = text;
            if (savedText != null)
                newText = savedText + '\n' + text;
            $("#programoutput").text(newText);
        }
        function isButtonActive() {
            return $("#toggle-icon").hasClass("nc-minimal-down");
        }
        // save text from previous installation
        function saveText(text) {
            savedText = text;
        }
        // initialization function
        $(window).on("load", function () {
            $("#continue-btn").hide();
            $("#installprogress").hide();
            pi_reindeer_gif = new SuperGif({gif: document.getElementById("pi_reindeer"),
                        progressbar_height: 0,
                        loop_mode: true,
                        auto_play: false,
                        });
            pi_reindeer_gif.load();
            scheduler_reindeer_gif = new SuperGif({gif: document.getElementById("scheduler_reindeer"),
                        progressbar_height: 0,
                        loop_mode: true,
                        auto_play: false,
                        })
            scheduler_reindeer_gif.load();
        });
        // handler function to show console output
        function toggleOutput() {
            if (!isButtonActive()) {
                $("#toggle-icon").removeClass("nc-minimal-up");
                $("#toggle-icon").addClass("nc-minimal-down");
                $("#console-output").collapse('hide');
            }
            else {
                $("#toggle-icon").removeClass("nc-minimal-down");
                $("#toggle-icon").addClass("nc-minimal-up");
                $("#console-output").collapse('show');
            }
        }
        // handler function for the continue button
        function continueBtn() {
            var oReq = new XMLHttpRequest();
            oReq.addEventListener("load", function () {
                if (this.status !== 200) {
                    showErrorModal("Failed to finish service install process");
                }
                else {
                    window.location.href = this.responseURL;
                }
            });
            oReq.open("POST", "/setup/services/finish");
            oReq.send();
        }
        // callback function for transitioning gifs on success/failure for a given service
        function viewGifPlaybackFinished(service, success) {
            var gif = service == "christmaspi" ? pi_reindeer_gif : scheduler_reindeer_gif;
            gif.loop_mode = false;
            if (success) {
                gif.stop_loop();
                gif.set_on_end(null);
                gif.load_url("/img/gifs/reindeer-checkmark-transition.gif", function() {
                    gif.play();
                });
            }
            else {
                gif.stop_loop();
                gif.set_on_end(null);
                gif.load_url("/img/gifs/reindeer-x-transition.gif", function() {
                    gif.play();
                });
            }     
        }
        // indicates that a process is being installed
        function viewStartInstall(service) {
            if (service === "christmaspi" && servicesStatus[0] === "waiting") {
                currentService = "christmaspi";
                servicesStatus[0] = "installing";
                setServiceTitle("Installing", "christmaspi");
                pi_reindeer_gif.play();
            }
            else if (service === "scheduler" && servicesStatus[1] === "waiting") {
                currentService = "scheduler";
                servicesStatus[1] = "installing";
                setServiceTitle("Installing", "scheduler");
                scheduler_reindeer_gif.play();
            }
        }
        // indicates that a given service installed successfully
        function viewInstallSuccess(service) {
            if (service == "christmaspi" && servicesStatus[0] === "installing") {
                servicesStatus[0] = "success";
                setServiceTitle("Installed", "christmaspi");
                pi_reindeer_gif.stop_loop();
                pi_reindeer_gif.set_on_end(function(gif) {
                    viewGifPlaybackFinished("christmaspi", true);
                });
            }
            else if (service == "scheduler" && servicesStatus[1] === "installing") {
                servicesStatus[1] = "success";
                setServiceTitle("Installed", "scheduler");
                scheduler_reindeer_gif.stop_loop();
                scheduler_reindeer_gif.set_on_end(function(gif) {
                    viewGifPlaybackFinished("scheduler", true);
                });
            }
        }
        // indiciates that a given service failed to install
        function viewInstallFailure(service) {
            if (service == "christmaspi" && servicesStatus[0] === "installing") {
                servicesStatus[0] = "failure";
                setServiceTitle("Failure", "christmaspi");
                pi_reindeer_gif.stop_loop();
                pi_reindeer_gif.set_on_end(function(gif) {
                    viewGifPlaybackFinished("christmaspi", false, "pi");
                });
            }
            else if (service == "scheduler" && servicesStatus[1] === "installing") {
                servicesStatus[1] = "failure";
                setServiceTitle("Failure", "scheduler");
                scheduler_reindeer_gif.stop_loop();
                scheduler_reindeer_gif.set_on_end(function(gif) {
                    viewGifPlaybackFinished("scheduler", false, "schedule");
                });
            }
        }
        // marks a given service has disabled (won't be installed)
        function viewDisableService(service) {
            if (service === "christmaspi" && servicesStatus[0] === "waiting") {
                setServiceTitle("Not Installing", "christmaspi");
                servicesStatus[0] = "disabled";
            }
            else if (service === "scheduler" && servicesStatus[1] === "waiting") {
                setServiceTitle("Not Installing", "scheduler");
                servicesStatus[1] = "disabled";
            }
        }
        // Sets the title for the current, or specified, service
        function setServiceTitle(status, service = null) {
            useService = service == null ? currentService : service;
            if (useService === "christmaspi") {
                var title = `ChristmasPi Service - ${status}`
                $("#main-service-status").text(title);
            }
            else if (useService == "scheduler") {
                var title = `Scheduler Service - ${status}`
                $("#scheduler-service-status").text(title);
            }
        }
        // Starts the installation process
        function installService(installScheduler) {
            doInstallScheduler = installScheduler;
            var oReq = new XMLHttpRequest();
            oReq.addEventListener("load", function () {
                if (this.status !== 200) {
                    showErrorModal("Failed to start installation process");
                }
                else {
                    if (!installScheduler) {
                        viewDisableService("scheduler");
                    }
                    $("#installprogress").show();
                    //viewStartInstall("christmaspi");
                    servicePoller = setInterval(servicesInstallPoller, servicesPollTime);
                }
            });
            oReq.open("POST", "/setup/services/install");
            oReq.setRequestHeader("Content-Type", "application/json");
            var data = {
                installScheduler : installScheduler
            };
            var json = JSON.stringify(data);
            oReq.send(json);
        }
        // navigates to the reboot page
        function navigateToReboot() {
            window.location.href = "/setup/aux/reboot";
        }
        // populates the failed services list in the partial reboot modal
        function populateFailedServices() {
            var failedServices = [];
            if (servicesStatus[0] === "failure")
                failedServices.push("ChristmasPi");
            if (servicesStatus[1] === "failure")
                failedServices.push("Scheduler");
            var listElement = document.getElementById("failed-services-list");
            for (var i = 0; i < failedServices.length; i++) {
                var service = failedServices[i];
                var li = document.createElement("LI");
                li.textContent = service;
                listElement.appendChild(li);
            }
        }
        // handler function for updating the reboot timer
        function rebootTimer() {
            $("#timer-text").text(`${rebootDelay - timerCount}s`);
            timerCount = timerCount + 1;
            if (timerCount == rebootDelay)
                clearInterval(timerInterval);
        }
        function servicesInstallPoller() {
            var oReq = new XMLHttpRequest();
            oReq.addEventListener("load", function () {
                if (this.status !== 200) {
                    showErrorModal("Failed to get installation progress");
                    clearInterval(servicePoller);
                }
                else {
                    var obj = JSON.parse(this.responseText);
                    switch (obj["status"]) {
                        case "Stale":
                            // no updates are available
                            break;
                        case "Installing":
                            // actively installing current service
                            updateText(obj["output"]);
                            if (currentService === "christmaspi" && servicesStatus[0] === "waiting")
                                viewStartInstall("christmaspi")
                            else if (currentService === "scheduler" && servicesStatus[1] === "waiting")
                                viewStartInstall("scheduler")
                            break;
                        case "Success":
                            // successfully installed current service
                            saveText(obj["output"]);
                            updateText(obj["output"]);
                            viewInstallSuccess(currentService);
                            // increment currentService
                            if (currentService === "christmaspi") {
                                currentService = "scheduler";
                            }
                            break;
                        case "Failed":
                            // failed to install current service, will continue to install other services
                            $("#continue-btn").show();
                            updateText(obj["output"]);
                            viewInstallFailure(currentService);
                            break;
                        case "Rebooting":
                            // A reboot is required to continue the installation
                            console.log("reboot required");
                            clearInterval(servicePoller);
                            saveText(obj["output"]);
                            updateText(obj["output"]);
                            var partialReboot = servicesStatus[0] == "failure" || servicesStatus[1] == "failure";
                            console.log(`partialReboot: ${partialReboot}`);
                            if (partialReboot) {
                                // show alert for partial reboot
                                populateFailedServices();
                                $("#partialRebootModal").modal();
                                setTimeout(navigateToReboot, rebootDelay * 1000);
                                timerInterval = setInterval(rebootTimer, 1000);
                            }
                            else {
                                navigateToReboot();
                            }
                            break;
                        case "Finished":
                            // the services installation was completed, no reboot required
                            clearInterval(servicePoller);
                            $("#continue-btn").show();
                            break;
                    }
                }
            });
            oReq.open("GET", "/setup/services/progress");
            oReq.send();
        }
    </script>
}
<h4>Would you like to enable the Scheduler service?</h4>
<button id="install-btn" class="btn btn-primary" onclick="installService(true)">Enable service</button>
<button id="decline-btn" class="btn btn-secondary" onclick="installService(false)">Not now</button>
<div id="installprogress" class="hide">
    <div class="card card-static" style="width: 95%;">
        <ul class="list-group list-group-flush">
            <li class="list-group-item" id="main-service-item">
                <div>
                    <h4 class="h-no-newline" id="main-service-status">ChristmasPi Service - Installing</h4>
                    <div class="h-no-newline">
                        <img id="pi_reindeer" class="float-right h-no-newline" id="main-service-icon" src="/img/icons/reindeer.gif" width="57.6" height="41.4" rel:auto_play="0" />
                    </div>
                </div>
            </li>
            <li class="list-group-item" id="scheduler-service-item">
                <div>
                    <h4 class="h-no-newline" id="scheduler-service-status">Scheduler Service - Waiting</h4>
                    <div class="h-no-newline">
                        <img id="scheduler_reindeer" class="float-right hidden" id="scheduler-service-icon" src="/img/icons/reindeer.gif" width="57.6" height="41.4" rel:auto_play="0" />
                    </div>
                </div>
            </li>
            <li class="list-group-item">
                <div>
                    <h5 class="h-no-newline">Console Output</h5>
                    <button class="float-right btn btn-link" onclick="toggleOutput()">
                        <h5><i id="toggle-icon" class="nc-icon nc-minimal-down"></i></h5></button>
                    <div class="collapse" id="console-output">
                        <pre id="programoutput"></pre>
                    </div>
                </div>
            </li>
        </ul>
    </div>
</div>
<div class="modal fade" id="partialRebootModal" tabindex="-1" role="dialog" aria-labelledby="partialRebootModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title" id="partialRebootModalLabel">Redirecting to Reboot <p id="timer-text" class="h-no-newline">10s</p></h6>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>One of the services failed to install but another succeeded and requires a reboot. Please manually fix the affending service after the installation has succeeded.</p>
                    <h3>Services that failed to install:</h3>
                    <ul id="failed-services-list">
                    </ul>
                </div>
            </div>
        </div>
    </div>

<button id="continue-btn" class="btn btn-info" onclick="continueBtn()">Continue</button>