@{
    ViewData["Title"] = "Setup";
    ViewData["SetupTitle"] = "Services";
    ViewData["SetupStep"] = 5;
    ViewBag.BreadCrumbs = new string[] { "Hardware", "Lights", "Branches", "Defaults", "Services" };
    ViewBag.ShowProgress = true;
    @model ChristmasPi.Models.SetupServicesModel;
}
@section Scripts {
    <script type="text/javascript">
        var pi_reindeer_gif = null;
        var scheduler_reindeer_gif = null;
        var servicesStatus = ["waiting", "waiting"]
        var savedText = null;
        var successInstall = false;
        var doInstallScheduler = false;
        var servicePoller = null;
        var servicesPollTime = 100;

        // set current text
        function updateText(text) {
            newText = text;
            if (savedText != null)
                newText = savedText + '\n' + text;
            $("#programoutput").text(newText);
        }
        // save text from previous installation
        function saveText(text) {
            savedText = text;
        }
        $(window).on("load", function () {
            $("#continue-btn").hide();
            $("#installprogress").hide();
            pi_reindeer_gif = new SuperGif({gif: document.getElementById("pi_reindeer"),
                        progressbar_height: 0,
                        loop_mode: true,
                        auto_play: false,
                        });
            pi_reindeer_gif.load();
            scheduler_reindeer_gif = new SuperGif({gif: document.getElementById("scheduler_reindeer"),
                        progressbar_height: 0,
                        loop_mode: true,
                        auto_play: false,
                        })
            scheduler_reindeer_gif.load();
        });
        var buttonActive = $("#toggle-icon").hasClass("nc-minimal-down");
        function toggleOutput() {
            if (buttonActive) {
                $("#toggle-icon").removeClass("nc-minimal-up");
                $("#toggle-icon").addClass("nc-minimal-down");
                $("#console-output").collapse('hide');
                buttonActive = false;
            }
            else {
                $("#toggle-icon").removeClass("nc-minimal-down");
                $("#toggle-icon").addClass("nc-minimal-up");
                $("#console-output").collapse('show');
                buttonActive = true;
            }
        }
        function continueBtn() {
            var oReq = new XMLHttpRequest();
            oReq.addEventListener("load", function () {
                if (this.status !== 200) {
                    showErrorModal("Failed to finish service install process");
                }
                else {
                    window.location.href = this.responseURL;
                }
            });
            oReq.open("POST", "/setup/services/finish");
            oReq.send();
        }
        function viewGifPlaybackFinished(service) {
            console.log(`playback finished for ${service}`);
        }
        function viewStartInstall(service) {
            console.log(`start install ${service}`);
            if (service == "christmaspi") {
                servicesStatus[0] = "installing";
                pi_reindeer_gif.play();
            }
            else {
                servicesStatus[1] = "installing";
                scheduler_reindeer_gif.play();
            }
        }
        function viewInstallSuccess(service) {
            console.log(`install success ${service}`);
            if (service == "christmaspi") {
                if (servicesStatus[0] == "installing") {
                    servicesStatus[0] = "success";
                    pi_reindeer_gif.stop_loop();
                    pi_reindeer_gif.set_on_end(function(gif) {
                        viewGifPlaybackFinished("christmaspi");
                    });
                }
            }
            else {
                if (servicesStatus[1] == "installing") {
                    servicesStatus[1] = "success";
                    scheduler_reindeer_gif.stop_loop();
                    scheduler_reindeer_gif.set_on_end(function(gif) {
                        viewGifPlaybackFinished("scheduler");
                    });
                }
            }
        }
        function viewInstallFailure() {
            console.log(`install failure`);
        }
        function viewDisableService(service) {
            console.log(`disable service ${service}`);
            if (service == "christmaspi") {
                servicesStatus[0] = "disabled";
            }
            else {
                servicesStatus[1] = "disabled";
            }       
        }
        function setServiceTitle(isMainService, status) {
            if (isMainService) {
                var title = `ChristmasPi Service - ${status}`
                $("#main-service-status").text(title);
            }
            else {
                var title = `Scheduler Service - ${status}`
                $("#scheduler-service-status").text(title);
            }
        }
        function installService(installScheduler) {
            doInstallScheduler = installScheduler;
            var oReq = new XMLHttpRequest();
            oReq.addEventListener("load", function () {
                if (this.status !== 200) {
                    showErrorModal("Failed to start installation process");
                }
                else {
                    if (!installScheduler) {
                        setServiceTitle(false, "Not Installing");
                        viewDisableService("scheduler");
                    }
                    $("#installprogress").show();
                    viewStartInstall("christmaspi");
                    servicePoller = setInterval(servicesInstallPoller, servicesPollTime);
                }
            });
            oReq.open("POST", "/setup/services/install");
            oReq.setRequestHeader("Content-Type", "application/json");
            var data = {
                installScheduler : installScheduler
            };
            var json = JSON.stringify(data);
            oReq.send(json);
        }
        function servicesInstallPoller() {
            var oReq = new XMLHttpRequest();
            oReq.addEventListener("load", function () {
                if (this.status !== 200) {
                    showErrorModal("Failed to get installation progress");
                    clearInterval(servicePoller);
                }
                else {
                    var obj = JSON.parse(this.responseText);
                    switch (obj["status"]) {
                        case "Stale":
                            break;
                        case "Installing":
                            updateText(obj["output"]);
                            break;
                        case "Success":
                            saveText(obj["output"]);
                            updateText(obj["output"]);
                            successInstall = true;
                            setServiceTitle(true, "Installed");
                            if (doInstallScheduler) {
                                setServiceTitle(false, "Installing");
                                viewStartInstall("scheduler");
                                viewInstallSuccess("christmaspi");
                            }
                            break;
                        case "Reboot":
                            saveText(obj["output"]);
                            updateText(obj["output"]);
                            successInstall = true;
                            setServiceTitle(true, "Installed");
                            viewInstallSuccess("christmaspi");
                            if (doInstallScheduler) {
                                setServiceTitle(false, "Installed");
                                viewInstallSuccess("scheduler");
                            }
                            window.location.href = "/setup/aux/reboot";
                        case "Failed":
                            clearInterval(servicePoller);
                            $("#continue-btn").show();
                            updateText(obj["output"]);
                            setServiceTitle(!successInstall, "Failed");
                            viewInstallFailure();
                            break;
                        case "AllDone":
                            clearInterval(servicePoller);
                            setServiceTitle(true, "Installed");
                            viewInstallSuccess("christmaspi");
                            if (doInstallScheduler) {
                                setServiceTitle(false, "Installed");
                                viewInstallSuccess("scheduler");
                            }
                            $("#continue-btn").show();
                            break;
                    }
                }
            });
            oReq.open("GET", "/setup/services/progress");
            oReq.send();
            // clearInterval(servicePoller);
        }
    </script>
}
<h4>Would you like to enable the Scheduler service?</h4>
<button id="install-btn" class="btn btn-primary" onclick="installService(true)">Enable service</button>
<button id="decline-btn" class="btn btn-secondary" onclick="installService(false)">Not now</button>
<div id="installprogress" class="hide">
    <div class="card card-static" style="width: 95%;">
        <ul class="list-group list-group-flush">
            <li class="list-group-item" id="main-service-item">
                <div>
                    <h4 class="h-no-newline" id="main-service-status">ChristmasPi Service - Installing</h4>
                    <div class="h-no-newline">
                        <img id="pi_reindeer" class="float-right h-no-newline" id="main-service-icon" src="/img/icons/reindeer.gif" width="57.6" height="41.4" rel:auto_play="0" />
                    </div>
                </div>
            </li>
            <li class="list-group-item" id="scheduler-service-item">
                <div>
                    <h4 class="h-no-newline" id="scheduler-service-status">Scheduler Service - Waiting</h4>
                    <div class="h-no-newline">
                        <img id="scheduler_reindeer" class="float-right hidden" id="scheduler-service-icon" src="/img/icons/reindeer.gif" width="57.6" height="41.4" rel:auto_play="0" />
                    </div>
                </div>
            </li>
            <li class="list-group-item">
                <div>
                    <h5 class="h-no-newline">Console Output</h5>
                    <button class="float-right btn btn-link" onclick="toggleOutput()">
                        <h5><i id="toggle-icon" class="nc-icon nc-minimal-down"></i></h5></button>
                    <div class="collapse" id="console-output">
                        <pre id="programoutput"></pre>
                    </div>
                </div>
            </li>
        </ul>
    </div>
</div>

<button id="continue-btn" class="btn btn-info" onclick="continueBtn()">Continue</button>